{"version":3,"sources":["components/ButtonsComponent/ButtonsComponent.js","components/calculatorContainer/CalculatorContainer.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonsComponent","btnClass","btnValue","btnId","onButtonClick","className","id","value","onClick","e","CalculatorContainer","useState","displayValue","setDisplayValue","operations","a","b","isOperator","operator","solveEquation","equationString","eqArr","length","tempArrItem","item","pop","push","parseFloat","stringToArray","solution","total","x","current","next","nextNext","calculate","isNaN","handleDisplayChange","target","currentChar","substring","includes","calcBtnInfo","cName","map","btn","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32fe8fd7.chunk.js","sourcesContent":["import './buttonComponents.css';\n\nfunction ButtonsComponent({ btnClass, btnValue, btnId, onButtonClick }) {\n  return (\n      <button \n        className={`grid-item ${btnClass}`} \n        id={btnId} \n        value={btnValue}\n        onClick={(e) => onButtonClick(e)}>{btnValue}</button>\n  )\n}\n\nexport default ButtonsComponent;","import { useState } from 'react';\nimport './calculatorContainer.css';\nimport ButtonsComponent from '../ButtonsComponent/ButtonsComponent';\n\nfunction CalculatorContainer() {\n  const [displayValue, setDisplayValue] = useState(\"0\");\n\n  const calculatorBtns = [\n    { cName: \"AC\", value: \"AC\", id: \"clear\" },\n    { cName: \"divide\", value: \"/\", id: \"divide\" },\n    { cName: \"multiply\", value: \"x\", id: \"multiply\" },\n    { cName: \"seven\", value: \"7\", id: \"seven\" },\n    { cName: \"eight\", value: \"8\", id: \"eight\" },\n    { cName: \"nine\", value: \"9\", id: \"nine\" },\n    { cName: \"subtract\", value: \"-\", id: \"subtract\" },\n    { cName: \"four\", value: \"4\", id: \"four\" },\n    { cName: \"five\", value: \"5\", id: \"five\" },\n    { cName: \"six\", value: \"6\", id: \"six\" },\n    { cName: \"add\", value: \"+\", id: \"add\" },\n    { cName: \"one\", value: \"1\", id: \"one\" },\n    { cName: \"two\", value: \"2\", id: \"two\" },\n    { cName: \"three\", value: \"3\", id: \"three\" },\n    { cName: \"equal\", value: \"=\" , id: \"equals\"},\n    { cName: \"zero\", value: \"0\", id: \"zero\" },\n    { cName: \"decimal\", value: \".\", id: \"decimal\" }\n  ]\n\n  let operations = {\n    \"+\": function(a, b) { return a + b },\n    \"-\": function(a, b) { return a - b },\n    \"x\": function(a, b) { return a * b },\n    \"/\": function(a, b) { return a / b },\n  }\n\n  function isOperator(operator) {\n    if(operations[operator]) {\n      return true;\n    } \n    return false;\n  }\n\n  function stringToArray(equationString) {\n    //if first item is an operator return null\n    if(isOperator(equationString[0])) {\n      return null;\n    //else if item is one number return single item, no need to loop through string\n    } else if(equationString.length === 1) {\n      return equationString;\n    } \n    let tempArrItem = equationString[0];\n    let eqArr = []\n\n    for(let item = 1; item < equationString.length; item++) {\n      // if operator push running number to array and operator\n      if(isOperator(equationString[item])) {\n        //testing for multiple operators or negative sign\n        if(isOperator(equationString[item - 1]) && equationString[item] === \"-\") {\n          tempArrItem = \"-\";\n        } else if(isOperator(equationString[item - 1])) {\n          eqArr.pop();\n          eqArr.push(equationString[item]);\n          tempArrItem = \"\";\n        } else {\n          eqArr.push(parseFloat(tempArrItem), equationString[item]);\n          tempArrItem = \"\";\n        }\n      //else keep adding numbers to string as long as it doesn't hit operator\n      } else {\n        tempArrItem += equationString[item];\n      }\n    }\n    //push final number to array\n    eqArr.push(parseFloat(tempArrItem))\n    return eqArr;\n  }\n\n  function calculate(eqArr) {\n    //if array is null return null\n    if(!eqArr) {\n      return eqArr;\n    //if array has only one number return single item, no need to loop through array\n    } else if(eqArr.length === 1) {\n      return eqArr;\n    }\n    let total = 0;\n    for(let x = 0; x < eqArr.length; x++) {\n      let current = eqArr[x];\n      let next = eqArr[x + 1];\n      let nextNext = eqArr[x + 2];\n\n      //if first loop, call operations[objects key operator](with operand 1, operand 2) \n      //& add 3 to x to get to next operator \n      if(x === 0) {\n        total = operations[next](current, nextNext);\n        x += 2;\n      } \n      //else call operations[objects key operator](with running total, 2nd operand)\n      //& add 1 to x to get to all following operators\n      else {\n        total = operations[current](total, next);\n        x++;\n      }\n    }\n    return total;\n  }\n\n  const solveEquation = (equationString) => {\n    let eqArr = stringToArray(equationString);\n    let solution = calculate(eqArr);\n    //if NaN display \"ERROR\"\n    if(isNaN(solution) || !solution) {\n      solution = 'ERROR';\n    }\n    setDisplayValue(solution);\n  }\n\n  const handleDisplayChange = (e) => {\n    let value = e.target.value;\n    if(value === \"AC\") {\n      setDisplayValue(\"0\");\n    } else if(value === \"=\") {\n      solveEquation(displayValue);\n    } else if(value === \".\") {\n      let currentChar = displayValue.length - 1; \n      //while it's not an operator or not equal to 0\n      while(!isOperator(displayValue[currentChar]) && currentChar !== 0) {\n        currentChar--;\n      }\n      if(displayValue.substring(++currentChar).includes(\".\")) {\n        return;\n      } else {\n        setDisplayValue(displayValue + value);\n     }\n    } else if(displayValue === \"0\" && value === 0) {\n      return;\n    } else if(displayValue === \"0\") {\n      setDisplayValue(value);\n    } else {\n      setDisplayValue(displayValue + value);\n    }\n  }\n\n  const calcBtnInfo = calculatorBtns.map((btn, index) =>\n    <ButtonsComponent \n      key={index} \n      btnClass={btn.cName}\n      btnValue={btn.value}\n      btnId={btn.id}\n      onButtonClick={handleDisplayChange}\n    />\n  )\n\n  return (\n    <div className='calc-container'>\n      {/* display is state that will be displayed here in curly braces */}\n      <div className=\"display grid-item\" id=\"display\">{displayValue}</div>\n      {calcBtnInfo}\n    </div>\n  )\n}\n\nexport default CalculatorContainer;","import './App.css';\nimport CalculatorContainer from './components/calculatorContainer/CalculatorContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      < CalculatorContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}